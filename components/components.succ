# Author: Mitchell Talyat
# Ideas generated by...
# * Myself - Anything not listed below
# * STF - Half Adder, Full Adder, ALU Circuit

# Notes:
#
#       Color schemes:
# All components of the same type/functionality with the same size should have the same color.
# Any components that are the inverse of another type of component (such as NAND to AND, or Encoder 4x2 to Decoder 2x4)
# should have the same color, but lighter colored.
#
#       Peg placements:
# Input (data) pegs should be on the south side of the object (negative Z side).
# Selector pegs should be on the west side of the object (negative X side).
# Output pegs should be on the top or the north side of the object (positive Z side).
# For pegs on objects that should be placed in succession, the independant output peg should be on the east side (positive X side).
# This is so the input that should be fed into another input can be placed in a line.

#########
# Gates #
#########

OR Gate:
    column: "Logic"
    category: "Gates"
    prefab:
        blocks:
            -
                scale: (1, 1, 1)
                position: (0, 0, 0)
                color: (153, 11, 139)
        inputs:
            -
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            -
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.OrGate
    placingRules:
        gridPlacingDimensions: (2, 1)
NAND Gate:
    column: "Logic"
    category: "Gates"
    prefab:
        blocks:
            -
                scale: (1, 1, 1)
                position: (0, 0, 0)
                color: (196, 96, 96)
        inputs:
            -
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            -
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.NAndGate
    placingRules:
        gridPlacingDimensions: (2, 1)
XNOR Gate:
    column: "Logic"
    category: "Gates"
    prefab:
        blocks:
            -
                scale: (2, 1, 1)
                position: (0.5, 0, 0)
                color: (113, 127, 217)
        inputs:
            -
                position: (0, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            -
                position: (1, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (1, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.XNorGate
    placingRules:
        offsetDimensions: (2, 1)
        gridPlacingDimensions: (2, 2)
        allowFineRotation: false
        canBeFlipped: true
        flippingPointHeight: 0.5
NOR Gate:
    column: "Logic"
    category: "Gates"
    prefab:
        blocks:
            -
                scale: (1, 1, 1)
                position: (0, 0, 0)
                color: (204, 100, 194)
        inputs:
            -
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            -
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.NorGate
    placingRules:
        gridPlacingDimensions: (2, 1)
###########
# Latches #
###########

SR Latch:
    column: "Logic"
    category: "Latches"
    prefab:
        blocks:
            -
                scale: (1, 1, 2)
                position: (0, 0, 0.5)
                color: (23, 166, 158)
        inputs:
            - # S
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # R
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0, 1, 1)
                rotation: (0, 0, 0)
    logicCode: GG.SRLatch
    placingRules:
        gridPlacingDimensions: (1, 3)
        offsetDimensions: (1, 2)
        allowFineRotation: false
# Base game contains D Latch
T Latch:
    column: "Logic"
    category: "Latches"
    prefab:
        blocks:
            -
                scale: (1, 1, 2)
                position: (0, 0, 0.5)
                color: (23, 166, 109)
        inputs:
            - # input
                position: (0, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # enable
                position: (0, 1, 0)
                rotation: (0, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0, 1, 1)
                rotation: (0, 0, 0)
    logicCode: GG.TLatch
    placingRules:
        gridPlacingDimensions: (1, 3)
        offsetDimensions: (1, 2)
        allowFineRotation: false
################
# Multiplexers #
################

Mux 2x1:
    column: "Logic"
    category: "Multiplexers"
    prefab:
        blocks:
            -
                scale: (1, 1, 1)
                position: (0, 0, 0)
                color: (49, 82, 49)
        inputs:
            - # selector
                position: (-0.5, 0.5, 0)
                rotation: (0, 0, 90)
                length: 0.6
            - # input line 0
                position: (-0.25, 0.5, -0.5) # these input lines are backwards, might need to switch and switch it in the code too
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (0.25, 0.5, -0.5) # <--
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Mux2x1
    placingRules:
        gridPlacingDimensions: (2, 1)
Mux 4x1:
    column: "Logic"
    category: "Multiplexers"
    prefab:
        blocks:
            -
                scale: (2, 1, 1)
                position: (0.5, 0, 0)
                color: (49, 82, 49)
        inputs:
            - # selector 0
                position: (-0.5, 0.5, 0.25)
                rotation: (0, 0, 90)
                length: 0.6
            - # selector 1
                position: (-0.5, 0.5, -0.25)
                rotation: (0, 0, 90)
                length: 0.6
            - # input line 0
                position: (1.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (0.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 2
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 3
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0.5, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Mux4x1
    placingRules:
        gridPlacingDimensions: (3, 1)
Mux 8x1:
    column: "Logic"
    category: "Multiplexers"
    prefab:
        blocks:
            -
                scale: (4, 1, 1)
                position: (1.5, 0, 0)
                color: (49, 82, 49)
        inputs:
            - # selector 0
                position: (-0.5, 0.5, 0.333)
                rotation: (0, 0, 90)
                length: 0.6
            - # selector 1
                position: (-0.5, 0.5, 0)
                rotation: (0, 0, 90)
                length: 0.6
            - # selector 2
                position: (-0.5, 0.5, -0.333)
                rotation: (0, 0, 90)
                length: 0.6
            - # input line 0
                position: (3.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (2.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 2
                position: (2.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 3
                position: (1.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 4
                position: (1.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 5
                position: (0.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 6
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 7
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (1.5, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Mux8x1
    placingRules:
        gridPlacingDimensions: (4, 1)
Demux 1x2:
    column: "Logic"
    category: "Multiplexers"
    prefab:
        blocks:
            -
                scale: (1, 1, 1)
                position: (0, 0, 0)
                color: (100, 135, 100)
        inputs:
            - # selector 0
                position: (-0.5, 0.5, 0)
                rotation: (0, 0, 90)
                length: 0.6
            - # data
                position: (0, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (-0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Demux1x2
    placingRules:
        gridPlacingDimensions: (2, 1)
Demux 2x4:
    column: "Logic"
    category: "Multiplexers"
    prefab:
        blocks:
            -
                scale: (2, 1, 1)
                position: (0.5, 0, 0)
                color: (100, 135, 100)
        inputs:
            - # selector 0
                position: (-0.5, 0.5, 0.25)
                rotation: (0, 0, 90)
                length: 0.6
            - # selector 1
                position: (-0.5, 0.5, -0.25)
                rotation: (0, 0, 90)
                length: 0.6
            - # data
                position: (0.5, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (1.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (0.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (-0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Demux2x4
    placingRules:
        gridPlacingDimensions: (2, 1)
Demux 3x8:
    column: "Logic"
    category: "Multiplexers"
    prefab:
        blocks:
            -
                scale: (4, 1, 1)
                position: (1.5, 0, 0)
                color: (100, 135, 100)
        inputs:
            - # selector 0
                position: (-0.5, 0.5, 0.333)
                rotation: (0, 0, 90)
                length: 0.6
            - # selector 1
                position: (-0.5, 0.5, 0)
                rotation: (0, 0, 90)
                length: 0.6
            - # selector 2
                position: (-0.5, 0.5, -0.333)
                rotation: (0, 0, 90)
                length: 0.6
            - # data
                position: (1.5, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            - # 0
                position: (3.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 1
                position: (2.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 2
                position: (2.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 3
                position: (1.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 4
                position: (1.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 5
                position: (0.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 6
                position: (0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 7
                position: (-0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Demux3x8
    placingRules:
        gridPlacingDimensions: (2, 1)
##############
# Arithmetic #
##############
# Half Adder:
    # column: "Logic"
    # category: "Arithmetic"
    # prefab:
        # blocks:
            # -
                # scale: (1, 1, 1)
                # position: (0, 0, 0)
                # color: (107, 79, 41)
        # inputs:
            # - # input line 0
                # position: (-0.5, 0.5, 0.25)
                # rotation: (-90, 0, 0)
                # length: 0.6
            # - # input line 1
                # position: (-0.5, 0.5, -0.25)
                # rotation: (-90, 0, 0)
                # length: 0.6
        # outputs:
            # - # carry out
                # position: (0, 0.5, 0.5)
                # rotation: (90, 0, 0)
            # - # sum
                # position: (0.5, 0.5, 0)
                # rotation: (0, 0, 90)
    # logicCode: GG.HalfAdder
    # placingRules:
        # gridPlacingDimensions: (2, 1)
# Full Adder:
    # column: "Logic"
    # category: "Arithmetic"
    # prefab:
        # blocks:
            # -
                # scale: (1, 1, 1)
                # position: (0, 0, 0)
                # color: (107, 79, 41)
        # inputs:
            # - # input line 0
                # position: (0.25, 0.5, -0.5)
                # rotation: (-90, 0, 0)
                # length: 0.6
            # - # input line 1
                # position: (-0.25, 0.5, -0.5)
                # rotation: (-90, 0, 0)
                # length: 0.6
            # - # carry in
                # position: (-0.5, 0.5, 0)
                # rotation: (-90, 0, 0)
                # length: 0.6
        # outputs:
            # - # carry out
                # position: (0, 0.5, 0.5)
                # rotation: (90, 0, 0)
            # - # sum
                # position: (0.5, 0.5, 0)
                # rotation: (0, 0, 90)
    # logicCode: GG.FullAdder
    # placingRules:
        # gridPlacingDimensions: (2, 1)

############
# Encoders #
############

Encoder 4x2:
    column: "Logic"
    category: "Encoders Decoders"
    prefab:
        blocks:
            -
                scale: (2, 1, 1)
                position: (0.5, 0, 0)
                color: (50, 47, 107)
        inputs:
            - # input line 0
                position: (1.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (0.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 2
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 3
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (0.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Encoder4x2
    placingRules:
        gridPlacingDimensions: (2, 1)
Encoder 8x3:
    column: "Logic"
    category: "Encoders Decoders"
    prefab:
        blocks:
            -
                scale: (4, 1, 1)
                position: (1.5, 0, 0)
                color: (50, 47, 107)
        inputs:
            - # input line 0
                position: (3.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (2.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 2
                position: (2.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 3
                position: (1.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 4
                position: (1.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 5
                position: (0.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 6
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 7
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            -
                position: (2, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (1.5, 0.5, 0.5)
                rotation: (90, 0, 0)
            -
                position: (1, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Encoder8x3
    placingRules:
        gridPlacingDimensions: (4, 1)

Decoder 2x4:
    column: "Logic"
    category: "Encoders Decoders"
    prefab:
        blocks:
            -
                scale: (2, 1, 1)
                position: (0.5, 0, 0)
                color: (100, 96, 158)
        inputs:
            - # input line 0
                position: (0.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            - # 0
                position: (1.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 1
                position: (0.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 2
                position: (0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 3
                position: (-0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Decoder2x4
    placingRules:
        gridPlacingDimensions: (2, 1)
Decoder 3x8:
    column: "Logic"
    category: "Encoders Decoders"
    prefab:
        blocks:
            -
                scale: (4, 1, 1)
                position: (1.5, 0, 0)
                color: (100, 96, 158)
        inputs:
            - # input line 0
                position: (2, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 1
                position: (1.5, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # input line 2
                position: (1, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            - # 0
                position: (3.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 1
                position: (2.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 2
                position: (2.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 3
                position: (1.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 4
                position: (1.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 5
                position: (0.75, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 6
                position: (0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 7
                position: (-0.25, 0.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.Decoder3x8
    placingRules:
        gridPlacingDimensions: (4, 1)
########
# Misc #
########

Seven Segment Decoder:
    column: "Miscellaneous"
    prefab:
        blocks:
            -
                scale: (2, 3, 1)
                position: (0.5, 0, 0)
                color: (74, 74, 74)
        inputs:
            - # 0
                position: (1.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # 1
                position: (0.75, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # 2
                position: (0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
            - # 3
                position: (-0.25, 0.5, -0.5)
                rotation: (-90, 0, 0)
                length: 0.6
        outputs:
            - # 0 / A
                position: (0.5, 2.5, 0.5)
                rotation: (90, 0, 0)
            - # 1 / B
                position: (1, 2, 0.5)
                rotation: (90, 0, 0)
            - # 2 / C
                position: (1, 1, 0.5)
                rotation: (90, 0, 0)
            - # 3 / D
                position: (0.5, 0.5, 0.5)
                rotation: (90, 0, 0)
            - # 4 / E
                position: (0, 1, 0.5)
                rotation: (90, 0, 0)
            - # 5 / F
                position: (0, 2, 0.5)
                rotation: (90, 0, 0)
            - # 6 / G
                position: (0.5, 1.5, 0.5)
                rotation: (90, 0, 0)
    logicCode: GG.SevenSeg
    placingRules:
        gridPlacingDimensions: (2, 3)